{"version":3,"sources":["tone150.png","App.js","routes/story.js","routes/media.js","routes/profile.js","routes/login.js","routes/users.js","routes/artists.js","routes/clients.js","routes/contact.js","notfound.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","response","post","responseToPost","callApi","a","fetch","json","body","status","Error","message","handleSubmit","e","preventDefault","method","headers","JSON","stringify","text","setState","this","then","res","express","catch","err","console","log","className","src","logo","alt","onSubmit","type","value","onChange","target","Component","Story","React","Media","Profile","Login","props","history","push","placeholder","onClick","Users","Artists","params","match","id","to","Clients","Contact","Notfound","Boolean","window","location","hostname","routing","Nav","Item","exact","activeClassName","Container","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.53e9454a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tone150.a1707a80.png\";","import React, { Component } from 'react';\n// import logo from './tonelogo.svg';\nimport logo from './tone150.png'\nimport './App.css';\n\n// NOTE: App.js is currently placed in the scaffold like a controller, whereas the other components are in the routes directory. How do I want App.js to behave in relation to the other components?\n// TODO: API scrolling \n// FIXME: Performance issues with logo\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n  };\n  \n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n  \n  callApi = async () => {\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    \n    return body;\n  };\n  \n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/api/world', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: this.state.post }),\n    });\n    const body = await response.text();\n    \n    this.setState({ responseToPost: body });\n  };\n \nrender() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <p>{this.state.response}</p>\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <strong>Post to Server:</strong>\n          </p>\n          <input\n            type=\"text\"\n            value={this.state.post}\n            onChange={e => this.setState({ post: e.target.value })}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n        <p>{this.state.responseToPost}</p>\n        {/* <Story /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport { \n} from 'react-router-dom';\n\n// NOTE: What is the PURPOSE of story.js? What do I want them to do as a result? How is conversion described?\n// NOTE: Do I want to separate STORY from BLOG? Might these be combined? No. These are components not pages or stories. Which brings up another thing: how should I compose components into stories? Scrolling, nesting? Composition is a UX decision. \n// NOTE: Is story.js an about me page? UX\n// FIXME: How do I COMPOSE components?\n// TODO: UI story.js should show a Bootstrap component that presents content (text, media)\n\n\nclass Story extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Is Story \"about us\"? What is important to say about who we are?</h2>\n                <ol>\n                    <li>How do you want the user to feel after reading this page?</li>\n                    <li>From this page, what does conversion look like?</li>\n                </ol>\n                <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aut nulla eaque cum laudantium enim! Labore aliquid numquam rem perferendis, harum excepturi veniam eos eligendi blanditiis corrupti soluta reprehenderit qui voluptate.</p>\n                \n            </div>\n        )\n    }\n}\n\nexport default Story;","import React from 'react';\nimport { \n} from 'react-router-dom';\n\n// NOTE: media.js takes the place of both artist and client rosters (which are galleries) until they get enough (artists and clients) to show. (Until then, artists.js and clients.js should not be accessible, but can be ready to go!) \n// NOTE: media.js aggregates VDO, audio, twitter, publicity. This provides the WHY should I do the CTA (which is what contact them? Do online form?) This is API not UX\n// TODO: API axios.js \n// TODO: UI bootstrap\n\n\nclass Media extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2>Media blasts VDO, youtube, images, twitter, soundcloud, PR</h2> \n                <ol>\n                    <li>This could be the CTA \"sign this artist\"</li>\n                    <li>or a reinforcer, \"this is a good resource\" or \"I'm gonna contact them for a contract on this artist\".</li>\n                </ol>\n                <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aut nulla eaque cum laudantium enim! Labore aliquid numquam rem perferendis, harum excepturi veniam eos eligendi blanditiis corrupti soluta reprehenderit qui voluptate.</p>\n                \n                \n            </div>\n        )\n    }\n}\n\nexport default Media;\n\n","import React from 'react';\nimport { \n} from 'react-router-dom';\n\n\n// NOTE: profile.js is for FEATURED ARTIST or FEATURED CLIENT \n// TODO: parameterize profile.js from artists.js and clients.js. But can stand alone. \n\nclass Profile extends React.Component {\n    render() {\n\n        return (\n            <div>\n                <h2>Featured Artist / Featured Client</h2>\n                <ol>\n                    <li>Conversion is action to sign (either by artist or industry professional</li>\n                    <li>This page can be parameterized from artist roster and client roster</li>\n                </ol>\n                <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aut nulla eaque cum laudantium enim! Labore aliquid numquam rem perferendis, harum excepturi veniam eos eligendi blanditiis corrupti soluta reprehenderit qui voluptate.</p>\n            </div>\n        )\n    }\n}\n\nexport default Profile;","import React from 'react';\n\n// NOTE: login.js may have a UI login page and handles authentication. However, WHY and TO WHAT am I logging in? UX issue.\n// TODO: UI Bootstrap login\n// TODO: Authentication\n\nclass Login extends React.Component {\n\n    onSubmit = () => {\n        this.props.history.push('/')\n    }\n    render() {\n        return (\n            <div>\n                <h2>Login</h2>\n                <p>Both server and client-side can handle POST requests.</p>\n                <ol>\n                    <li>Authentication required</li>\n                    <li>Accesses DB</li>\n                    <li>Admin can view users</li>\n                    <li>Artists and Clients can view their accounts</li>\n                    <li>The account can be a todo list, allow favorites, a spreadsheet of signed contracts</li>\n                    <li>Or more like a CRM</li>\n                </ol>\n                <p>The question is of course, would anyone use it? Better to incorporate useful tools than replace them. Focus of what is essential, on what they need but do not yet have.</p>\n                <form>\n                    <input placeholder=\"name\" type=\"name\" />\n                    <input placeholder=\"email\" type=\"email\" />\n                    <button onClick={this.onSubmit}>Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Login;","import React from 'react';\n\n// NOTE: Internal admin page listing both artists and clients. Not public-facing. \n// TODO: API MongoDB \n\nclass Users extends React.Component {\n\n    onSubmit = () => {\n        this.props.history.push('/')\n    }\n    render() {\n        return (\n            <div>\n                <h2>Users</h2>\n                <ol>\n                    <li>Authentication, db, admin access to users</li>\n                </ol>\n                <p>This is an internal page where admin can access all users. Artists and clients.</p>\n                <form>\n                    <input placeholder=\"name\" type=\"name\" />\n                    <input placeholder=\"email\" type=\"email\" />\n                    <button onClick={this.onSubmit}>Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Users;","import React from 'react';\nimport { \n    // Route, \n    Link \n} from 'react-router-dom';\n\n// NOTE: artists.js and clients.js are handling parameterized GET requests. \n// FIXME: Bootstrap gallery of Artists || Clients? Problem is, they do not yet have a roster. What do I present instead? By using media.js instead \n// TODO: UI bootstrap gallery\n// TODO: API use parameterized GET request to go to profile.js (artist, client)\n\nclass Artists extends React.Component {\n    render() {\n        const { params } = this.props.match;\n        return (\n            <div>\n                <h2>Artist Roster</h2>\n                <p>Server is handling GET requests. Select from menu below. Or type in arbitrary number in address bar (after /).</p>\n                <p>User id: {params.id}</p>\n                <ul>\n                    <li>\n                        <Link to=\"/artists/1\">User 1 </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/artists/2\">User 2 </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/artists/3\">User 3 </Link>\n                    </li>\n                </ul>\n                {/* <Route path=\"/users/:id\" component={User} /> */}\n            </div>\n        )\n    }\n}\n\nexport default Artists;","import React from 'react';\nimport { \n    // Route, \n    Link \n} from 'react-router-dom';\n\n// NOTE: artists.js and client.js may refactor as the same parameterized component. \n\n\nclass Clients extends React.Component {\n    render() {\n        const { params } = this.props.match;\n        return (\n            <div>\n                <h2>Our Clients</h2>\n                <p>Server is handling GET requests. Select from menu below. Or type in arbitrary number in address bar (after /).</p>\n                <p>User id: {params.id}</p>                <ul>\n                    <li>\n                        <Link to=\"/clients/1\">User 1 </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/clients/2\">User 2 </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/clients/3\">User 3 </Link>\n                    </li>\n                </ul>\n                {/* <Route path=\"/users/:id\" component={User} /> */}\n            </div>\n        )\n    }\n}\n\nexport default Clients;","import React from 'react';\n\n// NOTE: contact.js handles server-side POST requests. This might be the CTA: Contact directly.\n// TODO: Round trip the POST request\n\nclass Contact extends React.Component {\n\n    onSubmit = () => {\n        this.props.history.push('/')\n    }\n    render() {\n        return (\n            <div>\n                <h2>Contact</h2>\n                <ol>\n                    <li>Stage one: user contacts VTG</li>\n                    <li>Stage two: handled through API</li>\n                </ol>\n                <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aut nulla eaque cum laudantium enim! Labore aliquid numquam rem perferendis, harum excepturi veniam eos eligendi blanditiis corrupti soluta reprehenderit qui voluptate.</p>\n                <p>Server is handling POST requests</p>\n                <form>\n                    <input placeholder=\"name\" type=\"name\" />\n                    <input placeholder=\"email\" type=\"email\" />\n                    <button onClick={this.onSubmit}>Submit</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Contact;","import React from 'react';\n\nconst Notfound = () => <h1>Not found</h1>\n\nexport default Notfound;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { \n  Route, \n  // Link, \n  NavLink,\n  Switch,\n  BrowserRouter as Router \n} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './custom.scss'; // OVERRIDES\nimport Nav from 'react-bootstrap/Nav'\nimport Container from 'react-bootstrap/Container'\n// import './index.css';\nimport App from './App';\nimport Story from './routes/story';\nimport Media from './routes/media';\nimport Profile from './routes/profile';\nimport Login from './routes/login';\nimport Users from './routes/users';\nimport Artists from './routes/artists';\nimport Clients from './routes/clients';\nimport Contact from './routes/contact';\nimport Notfound from './notfound';\nimport * as serviceWorker from './serviceWorker';\n\n// Routing =====\n// DONE: Move route files to routes directory. Update path index.js\n// DONE: Sitemap Flowmapp\n// DONE: touch new placeholders and route them: STORY, ARTISTS, CLIENT\n// NOTE: OPTIONAL Scrolling https://www.npmjs.com/package/react-router-scroll || see react docs. This is not as important as setting up the components themselves. Scrolling is a matter of how they are being displayed\n\n\n// UI =====\n// DONE: Remove styling from App.js and add to index.js\n// DONE: Add Bootstrap styles\n// DONE: client/src/custom.scss\n// DONE: Add Bootstrap Navbar to router in index.js\n// TODO: SASS stylesheets\n\n\n// API =====\n// TODO: API for the Client page: easily choose, and sign an artist?\n// TODO: Build POST request contact form contact.js \n// NOTE: The preliminary CTA might be to get them to call\n\n\n// DEBUG: Push and create Pull Request\n// NOTE: I want to be able to show distinct pages so routing is obvious. POST request needs to work. Some demo of server routing. Enough Bootstrap styling to make things presentable. \n\n// TODO: Update nav\n\nconst routing = (\n  <Router>\n    <div>   \n      <Nav className=\"justify-content-center\" >\n        <Nav.Item>\n          <NavLink className=\"nav-link\" exact activeClassName=\"active\" to=\"/\">\n            Home\n          </NavLink>         \n        </Nav.Item>\n\n        <Nav.Item>\n          <NavLink className=\"nav-link\" activeClassName=\"active\" to=\"/media\">\n            Media\n          </NavLink>         \n        </Nav.Item>\n\n        <Nav.Item>\n          <NavLink className=\"nav-link\" activeClassName=\"active\" to=\"/profile\">\n            Featured Artist\n          </NavLink>         \n        </Nav.Item>\n\n      {/* This is the CTA and somehow was to be emphasized */}\n      <Nav.Item>\n          <NavLink className=\"nav-link\" exact activeClassName=\"active\" to=\"/contact\">\n            Contact\n          </NavLink>         \n        </Nav.Item>\n      </Nav>\n\n      <Container>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/media\" component={Media} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route path=\"/story\" component={Story} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/users\" component={Users} />\n        <Route path=\"/artists/:id\" component={Artists} />\n        <Route path=\"/artists\" component={Artists} />\n        <Route path=\"/clients/:id\" component={Clients} />\n        <Route path=\"/clients\" component={Clients} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route component={Notfound} />\n      </Switch> \n      </Container>\n      \n\n      <Nav className=\"justify-content-center\" >\n      <Nav.Item>\n        <NavLink className=\"nav-link\" exact activeClassName=\"active\" to=\"/story\">\n          Story\n        </NavLink>         \n      </Nav.Item>\n\n      <Nav.Item>\n        <NavLink className=\"nav-link\" exact activeClassName=\"active\" to=\"/artists\">\n          Artists\n        </NavLink>         \n      </Nav.Item>\n\n      <Nav.Item>\n        <NavLink className=\"nav-link\" exact activeClassName=\"active\" to=\"/clients\">\n          Clients\n        </NavLink>         \n      </Nav.Item>\n\n      <Nav.Item>\n        <NavLink className=\"nav-link\" exact activeClassName=\"active\" to=\"/login\">\n          Login\n        </NavLink>         \n      </Nav.Item>\n\n      <Nav.Item>\n        <NavLink className=\"nav-link\" exact activeClassName=\"active\" to=\"/users\">\n          Users\n        </NavLink>         \n      </Nav.Item>\n\n      </Nav>\n\n    \n    </div>\n  </Router>\n)\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}